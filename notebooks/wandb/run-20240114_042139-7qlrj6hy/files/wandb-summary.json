{"langchain_trace": {"_type": "wb_trace_tree", "model_hash": "feeb6bd923c42ca8", "model_dict_dumps": "{\"1_Retriever\": {\"inputs\": {\"query\": \"what are two movies about dinosaurs\"}, \"outputs\": {\"documents\": [{\"page_content\": \"A bunch of scientists bring back dinosaurs and mayhem breaks loose\", \"metadata\": {\"director\": \"Steven Spielberg\", \"genre\": \"science fiction\", \"year\": \"1993\", \"rating\": \"7.7\", \"_kind\": \"9\"}}, {\"page_content\": \"Toys come alive and have a blast doing so\", \"metadata\": {\"director\": \"John Lasseter\", \"genre\": \"animated\", \"year\": \"1995\", \"rating\": \"9.1\", \"_kind\": \"f\"}}]}, \"repr\": \"SelfQueryRetriever(vectorstore=<langchain_community.vectorstores.redis.base.Redis object at 0x7fd819cecc70>, query_constructor=FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"Brief summary of a movie\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"genre\\\": {{\\\\n        \\\"description\\\": \\\"The genre of the movie\\\",\\\\n        \\\"type\\\": \\\"string or list[string]\\\"\\\\n    }},\\\\n    \\\"year\\\": {{\\\\n        \\\"description\\\": \\\"The year the movie was released\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }},\\\\n    \\\"director\\\": {{\\\\n        \\\"description\\\": \\\"The name of the movie director\\\",\\\\n        \\\"type\\\": \\\"string\\\"\\\\n    }},\\\\n    \\\"rating\\\": {{\\\\n        \\\"description\\\": \\\"A 1-10 rating for the movie\\\",\\\\n        \\\"type\\\": \\\"float\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | lt | lte | gt | gte | contain | like): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\\n| OpenAI(client=<openai.resources.completions.Completions object at 0x7fd819808640>, async_client=<openai.resources.completions.AsyncCompletions object at 0x7fd819589e70>, temperature=0.0, openai_api_key='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', openai_proxy='')\\n| StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>), structured_query_translator=<langchain.retrievers.self_query.redis.RedisTranslator object at 0x7fd81675fd60>, verbose=True)\", \"_kind\": \"SelfQueryRetriever\", \"2_RunnableSequence\": {\"inputs\": {\"query\": \"what are two movies about dinosaurs\"}, \"outputs\": {\"output\": {\"query\": \"dinosaur\", \"filter\": null, \"limit\": 2}}, \"_kind\": \"RunnableSequence\", \"first\": {\"repr\": \"FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"Brief summary of a movie\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"genre\\\": {{\\\\n        \\\"description\\\": \\\"The genre of the movie\\\",\\\\n        \\\"type\\\": \\\"string or list[string]\\\"\\\\n    }},\\\\n    \\\"year\\\": {{\\\\n        \\\"description\\\": \\\"The year the movie was released\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }},\\\\n    \\\"director\\\": {{\\\\n        \\\"description\\\": \\\"The name of the movie director\\\",\\\\n        \\\"type\\\": \\\"string\\\"\\\\n    }},\\\\n    \\\"rating\\\": {{\\\\n        \\\"description\\\": \\\"A 1-10 rating for the movie\\\",\\\\n        \\\"type\\\": \\\"float\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | lt | lte | gt | gte | contain | like): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\", \"_kind\": \"FewShotPromptTemplate\"}, \"middle\": [{\"_kind\": \"OpenAI\", \"temperature\": 0.0}], \"last\": {\"repr\": \"StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>)\", \"_kind\": \"StructuredQueryOutputParser\"}, \"3_FewShotPromptTemplate\": {\"inputs\": {\"query\": \"what are two movies about dinosaurs\"}, \"outputs\": {\"_kind\": \"StringPromptValue\", \"text\": \"Your goal is to structure the user's query to match the request schema provided below.\\n\\n<< Structured Request Schema >>\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\n\\n```json\\n{\\n    \\\"query\\\": string \\\\ text string to compare to document contents\\n    \\\"filter\\\": string \\\\ logical condition statement for filtering documents\\n    \\\"limit\\\": int \\\\ the number of documents to retrieve\\n}\\n```\\n\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\n\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\n\\nA comparison statement takes the form: `comp(attr, val)`:\\n- `comp` (eq | ne | lt | lte | gt | gte | contain | like): comparator\\n- `attr` (string):  name of attribute to apply the comparison to\\n- `val` (string): is the comparison value\\n\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\n- `op` (and | or): logical operator\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\n\\nMake sure that you only use the comparators and logical operators listed above and no others.\\nMake sure that filters only refer to attributes that exist in the data source.\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\nMake sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\n\\n\\n<< Example 1. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"teenager love\\\",\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Taylor Swift\\\\\\\"), eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Katy Perry\\\\\\\")), lt(\\\\\\\"length\\\\\\\", 180), eq(\\\\\\\"genre\\\\\\\", \\\\\\\"pop\\\\\\\"))\\\"\\n}\\n```\\n\\n\\n<< Example 2. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs that were not published on Spotify\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\\n\\n\\n<< Example 3. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are three songs about love\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"love\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\\n\\n\\n<< Example 4. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Brief summary of a movie\\\",\\n    \\\"attributes\\\": {\\n    \\\"genre\\\": {\\n        \\\"description\\\": \\\"The genre of the movie\\\",\\n        \\\"type\\\": \\\"string or list[string]\\\"\\n    },\\n    \\\"year\\\": {\\n        \\\"description\\\": \\\"The year the movie was released\\\",\\n        \\\"type\\\": \\\"integer\\\"\\n    },\\n    \\\"director\\\": {\\n        \\\"description\\\": \\\"The name of the movie director\\\",\\n        \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"rating\\\": {\\n        \\\"description\\\": \\\"A 1-10 rating for the movie\\\",\\n        \\\"type\\\": \\\"float\\\"\\n    }\\n}\\n}\\n```\\n\\nUser Query:\\nwhat are two movies about dinosaurs\\n\\nStructured Request:\\n\"}, \"repr\": \"FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"Brief summary of a movie\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"genre\\\": {{\\\\n        \\\"description\\\": \\\"The genre of the movie\\\",\\\\n        \\\"type\\\": \\\"string or list[string]\\\"\\\\n    }},\\\\n    \\\"year\\\": {{\\\\n        \\\"description\\\": \\\"The year the movie was released\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }},\\\\n    \\\"director\\\": {{\\\\n        \\\"description\\\": \\\"The name of the movie director\\\",\\\\n        \\\"type\\\": \\\"string\\\"\\\\n    }},\\\\n    \\\"rating\\\": {{\\\\n        \\\"description\\\": \\\"A 1-10 rating for the movie\\\",\\\\n        \\\"type\\\": \\\"float\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | lt | lte | gt | gte | contain | like): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\", \"_kind\": \"FewShotPromptTemplate\"}, \"4_OpenAI\": {\"inputs\": {\"prompts\": [\"Your goal is to structure the user's query to match the request schema provided below.\\n\\n<< Structured Request Schema >>\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\n\\n```json\\n{\\n    \\\"query\\\": string \\\\ text string to compare to document contents\\n    \\\"filter\\\": string \\\\ logical condition statement for filtering documents\\n    \\\"limit\\\": int \\\\ the number of documents to retrieve\\n}\\n```\\n\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\n\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\n\\nA comparison statement takes the form: `comp(attr, val)`:\\n- `comp` (eq | ne | lt | lte | gt | gte | contain | like): comparator\\n- `attr` (string):  name of attribute to apply the comparison to\\n- `val` (string): is the comparison value\\n\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\n- `op` (and | or): logical operator\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\n\\nMake sure that you only use the comparators and logical operators listed above and no others.\\nMake sure that filters only refer to attributes that exist in the data source.\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\nMake sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\n\\n\\n<< Example 1. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"teenager love\\\",\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Taylor Swift\\\\\\\"), eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Katy Perry\\\\\\\")), lt(\\\\\\\"length\\\\\\\", 180), eq(\\\\\\\"genre\\\\\\\", \\\\\\\"pop\\\\\\\"))\\\"\\n}\\n```\\n\\n\\n<< Example 2. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs that were not published on Spotify\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\\n\\n\\n<< Example 3. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are three songs about love\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"love\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\\n\\n\\n<< Example 4. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Brief summary of a movie\\\",\\n    \\\"attributes\\\": {\\n    \\\"genre\\\": {\\n        \\\"description\\\": \\\"The genre of the movie\\\",\\n        \\\"type\\\": \\\"string or list[string]\\\"\\n    },\\n    \\\"year\\\": {\\n        \\\"description\\\": \\\"The year the movie was released\\\",\\n        \\\"type\\\": \\\"integer\\\"\\n    },\\n    \\\"director\\\": {\\n        \\\"description\\\": \\\"The name of the movie director\\\",\\n        \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"rating\\\": {\\n        \\\"description\\\": \\\"A 1-10 rating for the movie\\\",\\n        \\\"type\\\": \\\"float\\\"\\n    }\\n}\\n}\\n```\\n\\nUser Query:\\nwhat are two movies about dinosaurs\\n\\nStructured Request:\\n\"]}, \"outputs\": {\"generations\": [[{\"text\": \"```json\\n{\\n    \\\"query\\\": \\\"dinosaur\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\", \"generation_info\": {\"finish_reason\": \"stop\", \"logprobs\": null}}]], \"llm_output\": {\"token_usage\": {\"completion_tokens\": 29, \"total_tokens\": 1130, \"prompt_tokens\": 1101}, \"model_name\": \"gpt-3.5-turbo-instruct\"}, \"run\": null}, \"_kind\": \"OpenAI\", \"temperature\": 0.0}, \"5_StructuredQueryOutputParser\": {\"inputs\": {\"input\": \"```json\\n{\\n    \\\"query\\\": \\\"dinosaur\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\"}, \"outputs\": {\"repr\": \"StructuredQuery(query='dinosaur', filter=None, limit=2)\", \"_kind\": \"StructuredQuery\"}, \"repr\": \"StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>)\", \"_kind\": \"StructuredQueryOutputParser\"}}}}", "root_span_dumps": "{\"span_id\": \"02e52037-92b9-4407-8217-141d7111b7f2\", \"name\": \"Retriever\", \"start_time_ms\": 1705206810998, \"end_time_ms\": 1705206811778, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 1}, \"results\": null, \"child_spans\": null, \"span_kind\": null}"}, "_timestamp": 1705206811.7803786, "_runtime": 712.1358575820923, "_step": 4}